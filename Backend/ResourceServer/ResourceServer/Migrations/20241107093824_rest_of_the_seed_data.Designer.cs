// <auto-generated />
using System;
using AuthenticationServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthenticationServer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241107093824_rest_of_the_seed_data")]
    partial class rest_of_the_seed_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthenticationServer.Model.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AdminTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("admin_type_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("AdminTypeId");

                    b.ToTable("admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e881241-24f0-44f5-ae1b-6f4cf7f9b6ef"),
                            AdminTypeId = new Guid("c06f39a7-1d51-4a4e-adb7-bb3d8aa2d5c5"),
                            FullName = "Master-Admin",
                            Password = "Password123!"
                        },
                        new
                        {
                            Id = new Guid("175f6613-80bf-4c5f-a159-5fd7d60dd952"),
                            AdminTypeId = new Guid("c71b4fa4-0a43-45c2-bd7d-70ccbb546faf"),
                            FullName = "Logging-Admin",
                            Password = "Password321!"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.AdminType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("admin_types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c06f39a7-1d51-4a4e-adb7-bb3d8aa2d5c5"),
                            Name = "MasterAdmin"
                        },
                        new
                        {
                            Id = new Guid("c71b4fa4-0a43-45c2-bd7d-70ccbb546faf"),
                            Name = "LoggAdmin"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_name");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d03334e-b319-49d1-9634-886857ceacbb"),
                            CountryName = "Sweden"
                        },
                        new
                        {
                            Id = new Guid("3ffb0d03-f337-4863-8795-f83a38c487f7"),
                            CountryName = "Norway"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("node_name");

                    b.HasKey("Id");

                    b.ToTable("nodes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1dd3fc45-fbbd-44b8-9c3b-d95145f50cac"),
                            NodeName = "Main Gate"
                        },
                        new
                        {
                            Id = new Guid("ef33a5c3-3fc5-41fe-bc81-cb58186340dd"),
                            NodeName = "Lobby Entrance"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.PurposeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("purpose_types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc586354-b7b0-4277-bcfd-24596c0f7c79"),
                            Name = "Service"
                        },
                        new
                        {
                            Id = new Guid("c1fbf656-acb9-462a-9907-baee396e51ce"),
                            Name = "Event"
                        },
                        new
                        {
                            Id = new Guid("9dcafe35-9a40-4b85-a9ba-251aa0bba98d"),
                            Name = "Meeting"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CheckInSign")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_in_sign");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_in_time");

                    b.Property<string>("CheckOutSign")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("check_out_sign");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("check_out_time");

                    b.Property<DateTime>("LastExportDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_export_date");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("VisitorId");

                    b.ToTable("status");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31b0e1d8-5be4-4549-ac84-f536437bd51a"),
                            CheckInSign = "JD123",
                            CheckInTime = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutSign = "JD456",
                            CheckOutTime = new DateTime(2024, 1, 1, 17, 0, 0, 0, DateTimeKind.Utc),
                            LastExportDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            NodeId = new Guid("1dd3fc45-fbbd-44b8-9c3b-d95145f50cac"),
                            VisitorId = new Guid("e63d3529-716f-4688-8c9d-6b12d25f56e8")
                        },
                        new
                        {
                            Id = new Guid("20dc902a-2d2e-472d-946c-f3f96dce41fa"),
                            CheckInSign = "JS321",
                            CheckInTime = new DateTime(2024, 1, 2, 9, 0, 0, 0, DateTimeKind.Utc),
                            CheckOutSign = "JS654",
                            CheckOutTime = new DateTime(2024, 1, 2, 18, 0, 0, 0, DateTimeKind.Utc),
                            LastExportDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            NodeId = new Guid("ef33a5c3-3fc5-41fe-bc81-cb58186340dd"),
                            VisitorId = new Guid("3317fcad-0aef-41af-bff3-3d60e3b7fbe7")
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fullname");

                    b.Property<string>("PassportNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("passport_no");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("SSN");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("visitors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e63d3529-716f-4688-8c9d-6b12d25f56e8"),
                            City = "Stockholm",
                            Company = "TechCorp",
                            CountryId = new Guid("8d03334e-b319-49d1-9634-886857ceacbb"),
                            FullName = "John Doe",
                            PassportNo = "A1234567",
                            SSN = "123-45-6789"
                        },
                        new
                        {
                            Id = new Guid("3317fcad-0aef-41af-bff3-3d60e3b7fbe7"),
                            City = "Oslo",
                            Company = "InnovateInc",
                            CountryId = new Guid("3ffb0d03-f337-4863-8795-f83a38c487f7"),
                            FullName = "Jane Smith",
                            PassportNo = "B7654321",
                            SSN = "987-65-4321"
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.VisitorAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<Guid>("PurposeTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("purpose_type_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<Guid>("VisitorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PurposeTypeId");

                    b.HasIndex("VisitorId");

                    b.ToTable("visitorAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("861efe29-4f8a-4d51-b99b-d99d7f87fecd"),
                            EndDate = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Password = "securePass1",
                            PurposeTypeId = new Guid("bc586354-b7b0-4277-bcfd-24596c0f7c79"),
                            StartDate = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "john.doe",
                            VisitorId = new Guid("e63d3529-716f-4688-8c9d-6b12d25f56e8")
                        },
                        new
                        {
                            Id = new Guid("df41d94e-ce75-408a-9933-d4570a8c13c5"),
                            EndDate = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Utc),
                            Password = "securePass2",
                            PurposeTypeId = new Guid("c1fbf656-acb9-462a-9907-baee396e51ce"),
                            StartDate = new DateTime(2024, 1, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            UserName = "jane.smith",
                            VisitorId = new Guid("3317fcad-0aef-41af-bff3-3d60e3b7fbe7")
                        });
                });

            modelBuilder.Entity("AuthenticationServer.Model.Admin", b =>
                {
                    b.HasOne("AuthenticationServer.Model.AdminType", "AdminType")
                        .WithMany()
                        .HasForeignKey("AdminTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminType");
                });

            modelBuilder.Entity("AuthenticationServer.Model.Status", b =>
                {
                    b.HasOne("AuthenticationServer.Model.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationServer.Model.Visitor", "Visitor")
                        .WithMany("Status")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("AuthenticationServer.Model.Visitor", b =>
                {
                    b.HasOne("AuthenticationServer.Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AuthenticationServer.Model.VisitorAccount", b =>
                {
                    b.HasOne("AuthenticationServer.Model.PurposeType", "PurposeType")
                        .WithMany()
                        .HasForeignKey("PurposeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationServer.Model.Visitor", "Visitor")
                        .WithMany("VisitorAccounts")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurposeType");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("AuthenticationServer.Model.Visitor", b =>
                {
                    b.Navigation("Status");

                    b.Navigation("VisitorAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
